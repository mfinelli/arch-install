---
# {{ ansible_managed }}
integrations:
  prometheus_remote_write:
    - basic_auth:
        password: "{{ monitoring_grafana_api_key['content'] | b64decode | trim }}"
        username: "{{ monitoring_grafana_metrics_id['content'] | b64decode | trim }}"
      url: "{{ monitoring_grafana_metrics_url['content'] | b64decode | trim }}"
  agent:
    enabled: true
    relabel_configs:
      - action: replace
        source_labels:
          - agent_hostname
        target_label: instance
      - action: replace
        target_label: job
        replacement: "integrations/agent-check"
    metric_relabel_configs:
      - action: keep
        regex: (prometheus_target_sync_length_seconds_sum|prometheus_target_scrapes_.*|prometheus_target_interval.*|prometheus_sd_discovered_targets|agent_build.*|agent_wal_samples_appended_total|process_start_time_seconds)
        source_labels:
          - __name__
  # Add here any snippet that belongs to the `integrations` section.
  # For a correct indentation, paste snippets copied from Grafana Cloud at the beginning of the line.
  node_exporter:
    enabled: true
    metric_relabel_configs:
    # drop extensive scrape statistics
      - action: drop
        regex: node_scrape_collector_.+
        source_labels: [__name__]
    relabel_configs:
      - replacement: "{{ ansible_hostname }}"
        target_label: instance
      # - replacement: integrations/raspberrypi-node
      #   target_label: job

logs:
  configs:
    - clients:
        - basic_auth:
            password: "{{ monitoring_grafana_api_key['content'] | b64decode | trim }}"
            username: "{{ monitoring_grafana_logs_id['content'] | b64decode | trim }}"
          url: "{{ monitoring_grafana_logs_url['content'] | b64decode | trim }}"
      name: integrations
      positions:
        filename: /tmp/positions.yaml
      scrape_configs:
        # Add here any snippet that belongs to the `logs.configs.scrape_configs` section.
        # For a correct indentation, paste snippets copied from Grafana Cloud at the beginning of the line.
        - job_name: integrations/node_exporter_journal_scrape
          journal:
            max_age: 24h
            labels:
              instance: "{{ ansible_hostname }}"
              job: integrations/node_exporter
          relabel_configs:
            - source_labels: ['__journal__systemd_unit']
              target_label: 'unit'
            - source_labels: ['__journal__boot_id']
              target_label: 'boot_id'
            - source_labels: ['__journal__transport']
              target_label: 'transport'
            - source_labels: ['__journal_priority_keyword']
              target_label: 'level'
        - job_name: integrations/node_exporter_direct_scrape
          static_configs:
            - targets:
                - localhost
              labels:
                instance: "{{ ansible_hostname }}"
                __path__: /var/log/{syslog,messages,*.log}
                job: integrations/node_exporter
        - job_name: integrations/agent
          journal:
            max_age: 24h
            labels:
              job: integrations/agent
          pipeline_stages:
            - match:
                selector: '{unit!="grafana-agent.service"}'
                action: drop
                drop_counter_reason: only_keep_grafana_agent_logs
            - regex:
                expression: "(level=(?P<log_level>[\\s]*debug|warn|info|error))"
            - labels:
                level: log_level
          relabel_configs:
            - source_labels: ['__journal__systemd_unit']
              target_label: 'unit'
            - source_labels: ['__journal__hostname']
              target_label: 'instance'
metrics:
  configs:
    - name: integrations
      remote_write:
        - basic_auth:
            password: "{{ monitoring_grafana_api_key['content'] | b64decode | trim }}"
            username: "{{ monitoring_grafana_metrics_id['content'] | b64decode | trim }}"
          url: "{{ monitoring_grafana_metrics_url['content'] | b64decode | trim }}"
      scrape_configs:
        # Add here any snippet that belongs to the `metrics.configs.scrape_configs` section.
        # For a correct indentation, paste snippets copied from Grafana Cloud at the beginning of the line.
  global:
    scrape_interval: 60s
  wal_directory: /tmp/grafana-agent-wal

# vim: ft=yaml.jinja2
